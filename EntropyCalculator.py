# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'e:\_files\VSCode\TIK\lab2\EntropyCalculator.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QTableWidget, QTableWidgetItem, QStyledItemDelegate, QLineEdit
from PyQt5.QtGui import QRegExpValidator
from PyQt5.QtCore import QRegExp
import sys
import entropy as ntrp
import numpy as np

class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.setEnabled(True)
        width = 390
        height = 300
        Dialog.resize(width, height)
        Dialog.setFixedSize(width, height)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setAcceptDrops(False)
        self.tableWidget = QtWidgets.QTableWidget(Dialog)
        self.tableWidget.setGeometry(QtCore.QRect(30, 10, 321, 131))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tableWidget.sizePolicy().hasHeightForWidth())

        #Table
        self.tableWidget.setSizePolicy(sizePolicy)
        self.tableWidget.setAutoScroll(False)
        self.tableWidget.setShowGrid(True)
        self.tableWidget.setGridStyle(QtCore.Qt.DashLine)
        self.tableWidget.setWordWrap(True)
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(3)
        self.tableWidget.setRowCount(3)

        #Table contents
        class IntDelegate(QStyledItemDelegate):
            def createEditor(self, parent, option, index):
                regex = QRegExp(r"[0-9.]*")
                validator = QRegExpValidator(regex, self)

                return QLineEdit(parent).setValidator(validator)

        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setVerticalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(2, item)

        #delegate = IntDelegate(self.tableWidget)
        #self.tableWidget.setItemDelegate(delegate)

        #Calculate Button
        self.pushButton_Calculate = QtWidgets.QPushButton(Dialog)
        self.pushButton_Calculate.setGeometry(QtCore.QRect(30, 150, 75, 23))
        self.pushButton_Calculate.setObjectName("pushButton_Calculate")
        self.pushButton_Calculate.clicked.connect(self.calc)

        #Display widgets
        self.lineEdit_unconditional_result = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_unconditional_result.setEnabled(False)
        self.lineEdit_unconditional_result.setGeometry(QtCore.QRect(230, 150, 125, 20))
        self.lineEdit_unconditional_result.setObjectName("lineEdit_unconditional_result")

        self.lineEdit_total_conditional_result = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_total_conditional_result.setEnabled(False)
        self.lineEdit_total_conditional_result.setGeometry(QtCore.QRect(230, 180, 125, 20))
        self.lineEdit_total_conditional_result.setObjectName("lineEdit_total_conditional_result")

        self.lineEdit_partial_conditional1_result = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_partial_conditional1_result.setEnabled(False)
        self.lineEdit_partial_conditional1_result.setGeometry(QtCore.QRect(230, 210, 125, 20))
        self.lineEdit_partial_conditional1_result.setObjectName("lineEdit_partial_conditional_result")

        self.lineEdit_partial_conditional2_result = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_partial_conditional2_result.setEnabled(False)
        self.lineEdit_partial_conditional2_result.setGeometry(QtCore.QRect(230, 240, 125, 20))
        self.lineEdit_partial_conditional2_result.setObjectName("lineEdit_partial_conditional_result")

        self.lineEdit_partial_conditional3_result = QtWidgets.QLineEdit(Dialog)
        self.lineEdit_partial_conditional3_result.setEnabled(False)
        self.lineEdit_partial_conditional3_result.setGeometry(QtCore.QRect(230, 270, 125, 20))
        self.lineEdit_partial_conditional3_result.setObjectName("lineEdit_partial_conditional_result")
        
        self.label_unconditional_result = QtWidgets.QLabel(Dialog)
        self.label_unconditional_result.setGeometry(QtCore.QRect(140, 150, 81, 20))
        self.label_unconditional_result.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_unconditional_result.setObjectName("label_unconditional_result")

        self.label_total_conditional_result = QtWidgets.QLabel(Dialog)
        self.label_total_conditional_result.setGeometry(QtCore.QRect(120, 180, 101, 20))
        self.label_total_conditional_result.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_total_conditional_result.setObjectName("label_total_conditional_result")

        self.label_partial_conditional1_result = QtWidgets.QLabel(Dialog)
        self.label_partial_conditional1_result.setGeometry(QtCore.QRect(110, 210, 111, 20))
        self.label_partial_conditional1_result.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_partial_conditional1_result.setObjectName("label_partial_conditional1_result")

        self.label_partial_conditional2_result = QtWidgets.QLabel(Dialog)
        self.label_partial_conditional2_result.setGeometry(QtCore.QRect(110, 240, 111, 20))
        self.label_partial_conditional2_result.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_partial_conditional2_result.setObjectName("label_partial_conditional2_result")

        self.label_partial_conditional3_result = QtWidgets.QLabel(Dialog)
        self.label_partial_conditional3_result.setGeometry(QtCore.QRect(110, 270, 111, 20))
        self.label_partial_conditional3_result.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label_partial_conditional3_result.setObjectName("label_partial_conditional3_result")

        self.checkBox_normalize = QtWidgets.QCheckBox(Dialog)
        self.checkBox_normalize.setGeometry(QtCore.QRect(30, 180, 70, 17))
        self.checkBox_normalize.setObjectName("checkBox_normalize")

        #Widget text
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Вираховувач Ентропії"))
        item = self.tableWidget.verticalHeaderItem(0)
        item.setText(_translate("Dialog", "1"))
        item = self.tableWidget.verticalHeaderItem(1)
        item.setText(_translate("Dialog", "2"))
        item = self.tableWidget.verticalHeaderItem(2)
        item.setText(_translate("Dialog", "3"))
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText(_translate("Dialog", "1"))
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText(_translate("Dialog", "2"))
        item = self.tableWidget.horizontalHeaderItem(2)
        item.setText(_translate("Dialog", "3"))
        self.pushButton_Calculate.setText(_translate("Dialog", "Вирахувати"))
        self.label_unconditional_result.setText(_translate("Dialog", "Безумовна:"))
        self.label_total_conditional_result.setText(_translate("Dialog", "Умовна повна:"))
        self.label_partial_conditional1_result.setText(_translate("Dialog", "Умовна часткова 1:"))
        self.label_partial_conditional2_result.setText(_translate("Dialog", "Умовна часткова 2:"))
        self.label_partial_conditional3_result.setText(_translate("Dialog", "Умовна часткова 3:"))
        self.checkBox_normalize.setText(_translate("Dialog", "Норм"))

    def calc(self):
        table = self.tableWidget
        rows = table.rowCount()
        cols = table.columnCount()
        
        values = []
        for row in range(rows):
            row_values = []
            for col in range(cols):
                item = table.item(row, col)
                val = 0
                if (item is not None):
                    val = item.text()      
                row_values.append(float(val))
            values.append(row_values)
        
        # Convert to NumPy array
        matrix = np.array(values)


        self.lineEdit_unconditional_result.setText(f"{ntrp.unconditional_entropy_from_matrix(matrix, do_normilize=self.checkBox_normalize.isChecked())}")
        self.lineEdit_total_conditional_result.setText(f"{ntrp.total_conditional_entropy_from_matrix(matrix, do_normilize=self.checkBox_normalize.isChecked())}")
        self.lineEdit_partial_conditional1_result.setText(f"{ntrp.partial_conditional_entropy_from_matrix(matrix, 0, do_normilize=self.checkBox_normalize.isChecked())}")
        self.lineEdit_partial_conditional2_result.setText(f"{ntrp.partial_conditional_entropy_from_matrix(matrix, 1, do_normilize=self.checkBox_normalize.isChecked())}")
        self.lineEdit_partial_conditional3_result.setText(f"{ntrp.partial_conditional_entropy_from_matrix(matrix, 2, do_normilize=self.checkBox_normalize.isChecked())}")
    



if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
